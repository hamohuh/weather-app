{"version":3,"sources":["components/SearchForm.js","components/Day.js","components/Temprature.js","components/MinTemp.js","components/MaxTemp.js","components/FeelsLike.js","components/WindSpeed.js","components/Sunrise.js","components/Sunset.js","components/SwitchTemp.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","id","onSubmit","e","preventDefault","loadWeather","onChange","callback","target","value","type","placeholder","Day","today","Date","getDay","className","Temprature","temp","weather","tempMeasure","parseInt","data","main","toFixed","MinTemp","minTemp","temp_min","MaxTemp","maxTemp","temp_max","FeelsLike","feelsLike","feels_like","WindSpeed","windSpeed","parseFloat","wind","speed","Sunrise","time","d","sys","sunrise","date","getHours","getMinutes","substr","Sunset","sunset","SwtchTemp","button","onClick","toggleTemp","Body","city","name","country","state","humidity","clouds","all","Container","Row","Col","App","a","url","axios","get","then","res","setState","catch","console","log","cityFromChile","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3e379c2d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction SearchForm(props) {\r\n\r\n    const handleChange = (e) => {\r\n        props.callback(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        props.loadWeather();\r\n    }\r\n\r\n    return (\r\n        <form id='app-form' onSubmit={handleSubmit}>\r\n            <input id='city-name-input' onChange={handleChange} type='text' placeholder='City...'></input>\r\n            <button id='search-button'>Search</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React from 'react'\r\n\r\nfunction Day(props) {\r\n\r\n    let a = new Date();\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n    let today = days[a.getDay()]\r\n\r\n    return (\r\n        <span className='today' >\r\n            <span>{today}</span>\r\n            <span> TODAY</span>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Day;","import React from 'react'\r\n\r\nfunction Temprature(props) {\r\n\r\n    let temp;\r\n    if (props.weather != null && props.tempMeasure === true) {\r\n        temp = parseInt(props.weather.data.main.temp - 273.15) + '°C';\r\n    } else if (props.weather != null && props.tempMeasure === false) {\r\n        temp = parseInt(((props.weather.data.main.temp - 273.15) * 9 / 5 + 32).toFixed(0)) + '°F';\r\n    } else {\r\n        temp = '--'\r\n    }\r\n\r\n    return (\r\n        <p className='main-temprature'>{temp}</p>\r\n    )\r\n}\r\n\r\nexport default Temprature;","import React from 'react'\r\n\r\nfunction MinTemp(props) {\r\n\r\n    let minTemp;\r\n    if (props.weather != null && props.tempMeasure === true) {\r\n        minTemp = parseInt(props.weather.data.main.temp_min - 273.15) + '°C';\r\n    } else if (props.weather != null && props.tempMeasure === false) {\r\n        minTemp = parseInt(((props.weather.data.main.temp_min - 273.15) * 9 / 5 + 32).toFixed(0)) + '°F';\r\n    } else {\r\n        minTemp = '--'\r\n    }\r\n\r\n    return (\r\n        <span className='min-temp'>{minTemp}</span>\r\n    )\r\n}\r\n\r\nexport default MinTemp;","import React from 'react'\r\n\r\nfunction MaxTemp(props) {\r\n\r\n    let maxTemp;\r\n    if (props.weather != null && props.tempMeasure === true) {\r\n        maxTemp = parseInt(props.weather.data.main.temp_max - 273.15) + '°C';\r\n    } else if (props.weather != null && props.tempMeasure === false) {\r\n        maxTemp = parseInt(((props.weather.data.main.temp_max - 273.15) * 9 / 5 + 32).toFixed(0)) + '°F';\r\n    } else {\r\n        maxTemp = '--'\r\n    }\r\n\r\n    return (\r\n        <span className='max-temp'>{maxTemp}</span>\r\n    )\r\n}\r\n\r\nexport default MaxTemp;","import React from 'react'\r\n\r\nfunction FeelsLike(props) {\r\n\r\n    let feelsLike;\r\n    if (props.weather != null && props.tempMeasure === true) {\r\n        feelsLike = parseInt(props.weather.data.main.feels_like - 273.15) + '°C';\r\n    } else if (props.weather != null && props.tempMeasure === false) {\r\n        feelsLike = (parseInt(props.weather.data.main.feels_like - 273.15) * 9 / 5 + 32).toFixed(0) + '°F';\r\n    } else {\r\n        feelsLike = '--'\r\n    }\r\n\r\n    return (\r\n        <span className='feels-like'>\r\n            <p>Feels Like</p>\r\n            <p>{feelsLike}</p>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default FeelsLike;","import React from 'react'\r\n\r\nfunction WindSpeed(props) {\r\n    //const windSpeed = props.weather != null ? parseFloat((props.weather.data.wind.speed * 3.6).toFixed(2)) + ' Km/H' : '--';\r\n\r\n    let windSpeed;\r\n    if (props.weather != null && props.tempMeasure === true) {\r\n        windSpeed = parseFloat((props.weather.data.wind.speed * 3.6).toFixed(2)) + ' Km/H';\r\n    } else if (props.weather != null && props.tempMeasure === false) {\r\n        windSpeed = ((props.weather.data.wind.speed * 3.6) / 1.609).toFixed(2) + ' Mph';\r\n    } else {\r\n        windSpeed = '--'\r\n    }\r\n\r\n    return (\r\n        <span className='wind-speed'>\r\n            <p>Wind Speed</p>\r\n            <p>{windSpeed}</p>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default WindSpeed;","import React from 'react'\r\n\r\nfunction Sunrise(props) {\r\n\r\n    let time, hours, minutes;\r\n    if (props.weather != null) {\r\n        let d = props.weather.data.sys.sunrise;\r\n        let date = new Date(d * 1000);\r\n        hours = date.getHours();\r\n        minutes = '0' + date.getMinutes();\r\n        time = hours + ':' + minutes.substr(-2) + 'AM';\r\n    } else {\r\n        time = '-:--'\r\n    }\r\n\r\n    return (\r\n        <span className='sunrise'>\r\n            <p>Sun Rise</p>\r\n            <p>{time}</p>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Sunrise;","import React from 'react'\r\n\r\nfunction Sunset(props) {\r\n\r\n    let time, hours, minutes;\r\n    if (props.weather != null) {\r\n        let d = props.weather.data.sys.sunset;\r\n        let date = new Date(d * 1000);\r\n        hours = (date.getHours() > 12) ? date.getHours() - 12 : date.getHours();\r\n        minutes = '0' + date.getMinutes();\r\n        time = hours + ':' + minutes.substr(-2) + 'PM';\r\n    } else {\r\n        time = '-:--';\r\n    }\r\n\r\n    return (\r\n        <span className='sunset'>\r\n            <p>Sun Set</p>\r\n            <p>{time}</p>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Sunset;","import React from 'react';\r\n\r\nfunction SwtchTemp(props) {\r\n\r\n    let handleClick = (e) => {\r\n        e.preventDefault();\r\n        props.toggleTemp()\r\n    }\r\n\r\n    let temp = props.tempMeasure === true ? 'F' : 'C';\r\n    let button = (props.weather == null) ? '' : <button className='toggle' onClick={handleClick}>{temp}</button>\r\n\r\n    return (\r\n        <span>{button}</span>\r\n    );\r\n\r\n}\r\n\r\nexport default SwtchTemp;","import React from 'react'\r\nimport Day from './Day'\r\nimport Temprature from './Temprature'\r\nimport MinTemp from './MinTemp'\r\nimport MaxTemp from './MaxTemp'\r\nimport FeelsLike from './FeelsLike'\r\nimport WindSpeed from './WindSpeed'\r\nimport Sunrise from './Sunrise'\r\nimport Sunset from './Sunset'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport SwtchTemp from '../components/SwitchTemp'\r\n\r\nfunction Body(props) {\r\n    const { weather, tempMeasure } = props;\r\n    const city = weather != null ? weather.data.name : '--'\r\n    const country = weather != null ? weather.data.sys.country : '--'\r\n    const state = weather != null ? weather.data.weather[0].main : '--'\r\n    const humidity = weather != null ? weather.data.main.humidity : '--'\r\n    const clouds = weather != null ? weather.data.clouds.all : '--'\r\n\r\n    return (\r\n\r\n        <Container className='container'>\r\n            <SwtchTemp weather={weather} tempMeasure={props.tempMeasure} toggleTemp={props.toggleTemp} />\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col className='location'>\r\n                    <span className='city'>{city}</span>\r\n                    <span className='country'>{', ' + country}</span>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row className=\"justify-content-md-center state\">\r\n                <Col>{state}</Col>\r\n            </Row>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col><Temprature weather={weather} tempMeasure={tempMeasure} /></Col>\r\n            </Row>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col><Day /></Col>\r\n                <Col>\r\n                    <MinTemp weather={weather} tempMeasure={tempMeasure} />\r\n                    <MaxTemp weather={weather} tempMeasure={tempMeasure} />\r\n                </Col>\r\n            </Row>\r\n\r\n            <hr></hr>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col><Sunrise weather={weather} /></Col>\r\n                <Col><Sunset weather={weather} /></Col>\r\n            </Row>\r\n            <hr></hr>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col><FeelsLike weather={weather} tempMeasure={tempMeasure} /></Col>\r\n                <Col><WindSpeed weather={weather} tempMeasure={tempMeasure} /></Col>\r\n            </Row>\r\n            <hr></hr>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col>\r\n                    <span className='humidity'>\r\n                        <p>Humidity</p>\r\n                        <p>{humidity}%</p>\r\n                    </span>\r\n                </Col>\r\n                <Col>\r\n                    <span className='clouds'>\r\n                        <p>Clouds</p>\r\n                        <p>{clouds}%</p>\r\n                    </span>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Body;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Searchform from './components/SearchForm';\nimport Body from './components/Body';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: '',\n      weather: null,\n      tempMeasure: true\n    }\n  }\n\n  loadWeather = async () => {\n    const url = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=b8eb68e1c174f223b1b7affd9174e75c`;\n\n    await axios.get(url)\n      .then(res => {\n        this.setState({ weather: res })\n      })\n      .catch(() => {\n        console.log(\"Couldn't get Weather\");\n      })\n    console.log(this.state.weather);\n  }\n\n  //getting data from child\n  callback = (cityFromChile) => {\n    this.setState({ city: cityFromChile })\n  }\n\n  toggleTemp = () => {\n    console.log(\"hi\");\n    this.setState({ tempMeasure: !this.state.tempMeasure })\n    console.log(this.state.tempMeasure);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Searchform\n          loadWeather={this.loadWeather}\n          callback={this.callback}\n        />\n        <Body\n          weather={this.state.weather}\n          toggleTemp={this.toggleTemp}\n          tempMeasure={this.state.tempMeasure}\n        />\n      </div >\n    )\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
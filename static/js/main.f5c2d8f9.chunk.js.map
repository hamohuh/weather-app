{"version":3,"sources":["components/SearchForm.js","components/Day.js","components/Temprature.js","components/MinTemp.js","components/MaxTemp.js","components/FeelsLike.js","components/WindSpeed.js","components/Sunrise.js","components/Sunset.js","components/SwitchTemp.js","components/ErrorHandeling.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["languages","axios","get","then","res","data","catch","err","console","log","message","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","name","slice","getSuggestionValue","suggestion","renderSuggestion","country","geonameid","SearchForm","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","props","callback","state","handleSubmit","e","preventDefault","loadWeather","this","inputProps","placeholder","onSubmit","id","React","Component","Day","today","Date","getDay","className","Temprature","temp","weather","tempMeasure","parseInt","main","toFixed","MinTemp","minTemp","temp_min","MaxTemp","maxTemp","temp_max","FeelsLike","feelsLike","feels_like","WindSpeed","windSpeed","parseFloat","wind","speed","Sunrise","time","d","sys","sunrise","date","getHours","getMinutes","substr","Sunset","sunset","SwitchTemp","button","onClick","toggleTemp","ErrorHandeling","finalMessage","resetError","errorMessage","useState","show","setShow","error","Toast","onClose","delay","autohide","Header","Body","city","humidity","clouds","all","Container","Row","Col","App","a","url","cityFromChile","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5c2d8f9.chunk.js","sourcesContent":["import React from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport axios from 'axios'\r\n\r\n/**\r\n * In this component i used an Auto suggestion API and passed a cities data set\r\n * to it as a json url \r\n * React Auto suggest https://github.com/moroshko/react-autosuggest\r\n */\r\n\r\n// Imagine you have a list of cities that you'd like to autosuggest.\r\nconst url = 'https://pkgstore.datahub.io/core/world-cities/world-cities_json/data/5b3dd46ad10990bca47b04b4739a02ba/world-cities_json.json';\r\nlet languages = [];\r\naxios.get(url).then(res => {\r\n    languages = res.data;\r\n}).catch(err => console.log(err.message)\r\n)\r\n\r\n// Teach Autosuggest how to calculate suggestions for any given input value.\r\nconst getSuggestions = value => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n\r\n    return inputLength === 0 ? [] : languages.filter(lang =>\r\n        lang.name.toLowerCase().slice(0, inputLength) === inputValue\r\n    );\r\n};\r\n\r\n// When suggestion is clicked, Autosuggest needs to populate the input\r\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n// input value for every given suggestion.\r\nconst getSuggestionValue = suggestion => suggestion.name;\r\n\r\n// Use your imagination to render suggestions.\r\nconst renderSuggestion = suggestion => (\r\n    <div>\r\n        {suggestion.name}, {suggestion.country} ({suggestion.geonameid})\r\n    </div>\r\n);\r\n\r\nclass SearchForm extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        // Autosuggest is a controlled component.\r\n        // This means that you need to provide an input value\r\n        // and an onChange handler that updates this value (see below).\r\n        // Suggestions also need to be provided to the Autosuggest,\r\n        // and they are initially empty because the Autosuggest is closed.\r\n        this.state = {\r\n            value: '',\r\n            suggestions: []\r\n        };\r\n    }\r\n\r\n    onChange = (event, { newValue }) => {\r\n        this.setState({\r\n            value: newValue\r\n        });\r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to update suggestions.\r\n    // You already implemented this logic above, so just use it.\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n            suggestions: getSuggestions(value)\r\n        });\r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to clear suggestions.\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        });\r\n        this.props.callback(this.state.value);\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.loadWeather();\r\n    }\r\n\r\n    render() {\r\n        const { value, suggestions } = this.state;\r\n\r\n        // Autosuggest will pass through all these props to the input.\r\n        const inputProps = {\r\n            placeholder: 'City...',\r\n            value,\r\n            onChange: this.onChange\r\n        };\r\n\r\n        // Finally, render it!\r\n        return (\r\n            <form onSubmit={this.handleSubmit} id='app-form'>\r\n                <Autosuggest\r\n                    suggestions={suggestions}\r\n                    onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                    onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                    getSuggestionValue={getSuggestionValue}\r\n                    renderSuggestion={renderSuggestion}\r\n                    inputProps={inputProps}\r\n                />\r\n                <button id='search-button'>Search</button>\r\n            </form>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchForm;","import React from 'react'\r\n\r\n/**\r\n * This functional component is responsible for rendering the TODAY day\r\n */\r\nfunction Day(props) {\r\n\r\n    let a = new Date();\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n    let today = days[a.getDay()]\r\n\r\n    return (\r\n        <span className='today' >\r\n            <span>{today}</span>\r\n            <span> TODAY</span>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Day;","import React from 'react'\r\n\r\n/**\r\n * This functional component is responsible for rendering the Main Temp\r\n * and it render the value either in C or F depends on the user choice\r\n */\r\nfunction Temprature(props) {\r\n\r\n    let temp;\r\n    if (props.weather != null && props.tempMeasure === true) {\r\n        temp = parseInt(props.weather.data.main.temp - 273.15) + '°C';\r\n    } else if (props.weather != null && props.tempMeasure === false) {\r\n        temp = parseInt(((props.weather.data.main.temp - 273.15) * 9 / 5 + 32).toFixed(0)) + '°F';\r\n    } else {\r\n        temp = '--'\r\n    }\r\n\r\n    return (\r\n        <p className='main-temprature'>{temp}</p>\r\n    )\r\n}\r\n\r\nexport default Temprature;","import React from 'react'\r\n\r\n/**\r\n * This functional component is responsible for rendering the Minimin Temp\r\n * and it render the value either in C or F depends on the user choice\r\n */\r\nfunction MinTemp(props) {\r\n\r\n    let minTemp;\r\n    if (props.weather != null && props.tempMeasure === true) {\r\n        minTemp = parseInt(props.weather.data.main.temp_min - 273.15) + '°C';\r\n    } else if (props.weather != null && props.tempMeasure === false) {\r\n        minTemp = parseInt(((props.weather.data.main.temp_min - 273.15) * 9 / 5 + 32).toFixed(0)) + '°F';\r\n    } else {\r\n        minTemp = '--'\r\n    }\r\n\r\n    return (\r\n        <span className='min-temp'>{minTemp}</span>\r\n    )\r\n}\r\n\r\nexport default MinTemp;","import React from 'react'\r\n\r\n/**\r\n * This functional component is responsible for rendering the Maximum Temp\r\n * and it render the value either in C or F depends on the user choice\r\n */\r\nfunction MaxTemp(props) {\r\n\r\n    let maxTemp;\r\n    if (props.weather != null && props.tempMeasure === true) {\r\n        maxTemp = parseInt(props.weather.data.main.temp_max - 273.15) + '°C';\r\n    } else if (props.weather != null && props.tempMeasure === false) {\r\n        maxTemp = parseInt(((props.weather.data.main.temp_max - 273.15) * 9 / 5 + 32).toFixed(0)) + '°F';\r\n    } else {\r\n        maxTemp = '--'\r\n    }\r\n\r\n    return (\r\n        <span className='max-temp'>{maxTemp}</span>\r\n    )\r\n}\r\n\r\nexport default MaxTemp;","import React from 'react'\r\n\r\n/**\r\n * This functional component is responsible for rendering the Feels like Temp\r\n * and it render the value either in C or F depends on the user choice\r\n */\r\nfunction FeelsLike(props) {\r\n\r\n    let feelsLike;\r\n    if (props.weather != null && props.tempMeasure === true) {\r\n        feelsLike = parseInt(props.weather.data.main.feels_like - 273.15) + '°C';\r\n    } else if (props.weather != null && props.tempMeasure === false) {\r\n        feelsLike = parseInt(((props.weather.data.main.feels_like - 273.15) * 9 / 5 + 32).toFixed(0)) + '°F';\r\n    } else {\r\n        feelsLike = '--'\r\n    }\r\n\r\n    return (\r\n        <span className='feels-like'>\r\n            <p>Feels Like</p>\r\n            <p>{feelsLike}</p>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default FeelsLike;","import React from 'react'\r\n\r\n/**\r\n * This functional component is responsible for rendering the Wind Speed\r\n * and it render the value either in KM/H or Mph depends on the user choice\r\n */\r\nfunction WindSpeed(props) {\r\n\r\n    let windSpeed;\r\n    if (props.weather != null && props.tempMeasure === true) {\r\n        windSpeed = parseFloat((props.weather.data.wind.speed * 3.6).toFixed(2)) + ' Km/H';\r\n    } else if (props.weather != null && props.tempMeasure === false) {\r\n        windSpeed = ((props.weather.data.wind.speed * 3.6) / 1.609).toFixed(2) + ' Mph';\r\n    } else {\r\n        windSpeed = '--'\r\n    }\r\n\r\n    return (\r\n        <span className='wind-speed'>\r\n            <p>Wind Speed</p>\r\n            <p>{windSpeed}</p>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default WindSpeed;","import React from 'react'\r\n\r\n/**\r\n * This functional component is responsible for rendering the sunrise time\r\n * it takes the time stamp from the given data and switch it human time\r\n */\r\nfunction Sunrise(props) {\r\n\r\n    let time, hours, minutes;\r\n    if (props.weather != null) {\r\n        let d = props.weather.data.sys.sunrise;\r\n        let date = new Date(d * 1000);\r\n        hours = date.getHours();\r\n        minutes = '0' + date.getMinutes();\r\n        time = hours + ':' + minutes.substr(-2) + 'AM';\r\n    } else {\r\n        time = '-:--'\r\n    }\r\n\r\n    return (\r\n        <span className='sunrise'>\r\n            <p>Sun Rise</p>\r\n            <p>{time}</p>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Sunrise;","import React from 'react'\r\n\r\n/**\r\n * This functional component is responsible for rendering the sunset time\r\n * it takes the time stamp from the given data and switch it human time\r\n */\r\nfunction Sunset(props) {\r\n\r\n    let time, hours, minutes;\r\n    if (props.weather != null) {\r\n        let d = props.weather.data.sys.sunset;\r\n        let date = new Date(d * 1000);\r\n        hours = (date.getHours() > 12) ? date.getHours() - 12 : date.getHours();\r\n        minutes = '0' + date.getMinutes();\r\n        time = hours + ':' + minutes.substr(-2) + 'PM';\r\n    } else {\r\n        time = '-:--';\r\n    }\r\n\r\n    return (\r\n        <span className='sunset'>\r\n            <p>Sun Set</p>\r\n            <p>{time}</p>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Sunset;","import React from 'react';\r\n\r\n/**\r\n * This Functional Component returns a button if we enter a valid city\r\n * this button is responsible for switching the tempMeasure in the App state\r\n * between false and true so we can use its value to set the measure to C or F\r\n */\r\nfunction SwitchTemp(props) {\r\n\r\n    let handleClick = (e) => {\r\n        e.preventDefault();\r\n        props.toggleTemp();\r\n    }\r\n\r\n    let temp = props.tempMeasure === true ? 'F' : 'C';\r\n    let button = (props.weather == null) ? '' : <button className='toggle' onClick={handleClick}>{temp}</button>\r\n\r\n    return (\r\n        <span>{button}</span>\r\n    );\r\n\r\n}\r\n\r\nexport default SwitchTemp;","import React from 'react';\r\nimport { Toast } from 'react-bootstrap'\r\n\r\n/**\r\n * This functional component is responsible for showing error on a Toasr message\r\n * if there is a poroblem with the function fetching Data from the Api\r\n */\r\nfunction ErrorHandeling(props) {\r\n\r\n    const { resetError, errorMessage } = props;\r\n\r\n    let finalMessage;\r\n    if (errorMessage === 'Request failed with status code 400') {\r\n        finalMessage = \"Enter a City name\"\r\n    } else if (errorMessage === 'Network Error') {\r\n        finalMessage = \"Check your Internet connection.\"\r\n    } else if (errorMessage === 'Request failed with status code 404') {\r\n        finalMessage = \"Enter a valid city Name.\"\r\n    }\r\n\r\n    // To handle Toast show and hide\r\n    const [show, setShow] = React.useState(false);\r\n\r\n    const reset = () => {\r\n        resetError();\r\n        setShow(false);\r\n    }\r\n\r\n    let error = props.errorMessage === '' ? '' :\r\n        (<Toast onClose={reset} show={!show} delay={3000} autohide>\r\n            <Toast.Header>\r\n                <strong className=\"mr-auto\">Error</strong>\r\n            </Toast.Header>\r\n            <Toast.Body>{finalMessage}</Toast.Body>\r\n        </Toast>)\r\n\r\n    return (\r\n        <span className='error-message'>{error}</span>\r\n    );\r\n}\r\n\r\nexport default ErrorHandeling;","import React from 'react';\r\nimport Day from './Day';\r\nimport Temprature from './Temprature';\r\nimport MinTemp from './MinTemp';\r\nimport MaxTemp from './MaxTemp';\r\nimport FeelsLike from './FeelsLike';\r\nimport WindSpeed from './WindSpeed';\r\nimport Sunrise from './Sunrise';\r\nimport Sunset from './Sunset';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport SwitchTemp from '../components/SwitchTemp';\r\nimport ErrorHandeling from '../components/ErrorHandeling';\r\n\r\n\r\nfunction Body(props) {\r\n    const { weather, tempMeasure, errorMessage, resetError } = props;\r\n\r\n    const city = weather != null ? weather.data.name : '--'\r\n    const country = weather != null ? weather.data.sys.country : '--'\r\n    const state = weather != null ? weather.data.weather[0].main : '--'\r\n    const humidity = weather != null ? weather.data.main.humidity : '--'\r\n    const clouds = weather != null ? weather.data.clouds.all : '--'\r\n\r\n    return (\r\n        <Container className='body-container'>\r\n\r\n            <ErrorHandeling errorMessage={errorMessage} resetError={resetError} />\r\n\r\n            <SwitchTemp weather={weather} tempMeasure={props.tempMeasure} toggleTemp={props.toggleTemp} />\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col className='location'>\r\n                    <span className='city'>{city}</span>\r\n                    <span className='country'>{', ' + country}</span>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row className=\"justify-content-md-center state\">\r\n                <Col>{state}</Col>\r\n            </Row>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col><Temprature weather={weather} tempMeasure={tempMeasure} /></Col>\r\n            </Row>\r\n\r\n            <Row className=\"day-and-minmax\">\r\n                <Col><Day /></Col>\r\n                <Col>\r\n                    <MinTemp weather={weather} tempMeasure={tempMeasure} />\r\n                    <MaxTemp weather={weather} tempMeasure={tempMeasure} />\r\n                </Col>\r\n            </Row>\r\n\r\n            <hr></hr>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col><Sunrise weather={weather} /></Col>\r\n                <Col><Sunset weather={weather} /></Col>\r\n            </Row>\r\n\r\n            <hr></hr>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col><FeelsLike weather={weather} tempMeasure={tempMeasure} /></Col>\r\n                <Col><WindSpeed weather={weather} tempMeasure={tempMeasure} /></Col>\r\n            </Row>\r\n\r\n            <hr></hr>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col>\r\n                    <span className='humidity'>\r\n                        <p>Humidity</p>\r\n                        <p>{humidity}%</p>\r\n                    </span>\r\n                </Col>\r\n                <Col>\r\n                    <span className='clouds'>\r\n                        <p>Clouds</p>\r\n                        <p>{clouds}%</p>\r\n                    </span>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Body;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Searchform from './components/SearchForm';\nimport Body from './components/Body';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: '',\n      weather: null,\n      tempMeasure: true,\n      errorMessage: ''\n    }\n  }\n\n  /**\n   * This methods loads the data from OpenWeather API \n   * and starts once we submit our search form or click search button\n   */\n  loadWeather = async () => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=b8eb68e1c174f223b1b7affd9174e75c`;\n\n    await axios.get(url)\n      .then(res => {\n        this.setState({ weather: res })\n      })\n      .catch((err) => {\n        this.setState({ errorMessage: err.message })\n      })\n  }\n\n  //getting data(city name) from our input in the SearchForm\n  callback = (cityFromChile) => {\n    this.setState({ city: cityFromChile })\n  }\n\n  // This method sets the error message to '' once we click close button on the toast\n  resetError = () => {\n    this.setState({ errorMessage: '' })\n  }\n\n  /**\n   * This method is responsible for switching the Temprature between C and F\n   * we pass it to Body Component then we pass it to SwitchTemp\n   */\n  toggleTemp = () => {\n    this.setState({ tempMeasure: !this.state.tempMeasure })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Searchform\n          loadWeather={this.loadWeather}\n          callback={this.callback}\n        />\n        <Body\n          weather={this.state.weather}\n          toggleTemp={this.toggleTemp}\n          tempMeasure={this.state.tempMeasure}\n          errorMessage={this.state.errorMessage}\n          resetError={this.resetError}\n        />\n      </div >\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}